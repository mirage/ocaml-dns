OASISFormat: 0.3
OCamlVersion: >= 4.00.0
Name:        dns
Version:     0.6.2
Authors:     Anil Madhavapeddy, Tim Deegan, Richard Mortier, Haris Rotsos
Maintainers: Anil Madhavapeddy <anil@recoil.org>
License:     LGPL-2.0 with OCaml linking exception
Synopsis:    DNS client and server implementation
Description: This is a pure OCaml implementation of the DNS protocol.
  It is intended to be a reasonably high-performance implementation,
  but clarity is preferred rather than low-level performance hacks.
Homepage:    https://github.com/mirage/ocaml-dns
Plugins:     META (0.3)
BuildTools:  ocamlbuild, camlp4o

Flag lwt
  Description: build the Lwt library
  Default: false

Flag async
  Description: build the Core/Async library
  Default: false

Flag mirage
  Description: build the Mirage library
  Default: false

Flag nettests
  Description: run the internet-using tests
  Default: false

Library dns
  Path: lib 
  Findlibname: dns
  Pack: true
  Modules: 
    Base64, Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie, 
    Zone, Zone_lexer, Zone_parser, Resolvconf
  BuildDepends:	cstruct (>= 0.6.0), cstruct.syntax, re, re.str

Library lwt
  Path: lwt
  Build$: flag(lwt)
  Install$: flag(lwt)
  Findlibname: lwt
  CSources:   binding_crypto.c
  CCLib:      -lcrypto
  Modules: Dns_server, Dns_resolver, Sec, Dnssec_rsa
  BuildDepends: 
    lwt.unix, lwt.syntax, cstruct, cstruct.syntax, dns, cryptokit
  FindlibParent: dns

Library mirage
  Path: mirage
  Build$: flag(mirage)
  Install$: flag(mirage)
  Findlibname: mirage
  Modules: Dns_server
  BuildDepends: mirage, mirage-net, cstruct, cstruct.syntax, dns
  FindlibParent: dns

Library async
  Path: async
  Build$: flag(async)
  Install$: flag(async)
  Findlibname: async
  Modules: Async_dns_resolver
  BuildDepends:
    async, lwt.unix, lwt.syntax, cstruct, cstruct.syntax, dns, cryptokit
  FindlibParent: dns


Document dns
  Title:                DNS docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  XOCamlbuildPath:      lib  
  XOCamlbuildModules:     
    Base64, Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie, 
    Zone, Zone_lexer, Zone_parser

Document dns_lwt
  Title:                DNS Lwt docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt)
  XOCamlbuildPath:      lwt
  XOCamlbuildModules:   Dns_resolver, Dns_server

Document dns_async
  Title:                DNS Async docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(async)
  XOCamlbuildPath:      async
  XOCamlbuildModules:   Async_dns_resolver

Executable lwt_server
  Path:               lib_test
  MainIs:             lwt_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns, dns.lwt

Executable time_server
  Path:               lib_test
  MainIs:             time_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns.lwt

Executable mldig
  Path:               lwt
  MainIs:             mldig.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, lwt.syntax, dns, re, re.str, cstruct, uri, cmdliner

Executable load_key
  Path:               lib_test
  MainIs:             load_key.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns.lwt, uri, cryptokit

Test lwt_server
  Run$:               flag(tests) && flag(lwt)
  Command:            $lwt_server
  WorkingDirectory:   lib_test

Executable get_nameserver
  Path:               async
  MainIs:             get_nameserver.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, uri, cryptokit, lwt, lwt.unix, lwt.syntax, dns.lwt, threads, async, core, async_unix

Executable async_mldig
  Path:               async
  MainIs:             async_mldig.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, re, re.str, cstruct, uri, cmdliner, threads, async, async_unix, core
