# OASIS_START
# DO NOT EDIT (digest: 9ada5e789e96168da7c0e1681bae8a89)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library dns
"lib": include
"lib/hashcons.cmx": for-pack(Dns)
"lib/Hashcons.cmx": for-pack(Dns)
"lib/loader.cmx": for-pack(Dns)
"lib/Loader.cmx": for-pack(Dns)
"lib/name.cmx": for-pack(Dns)
"lib/Name.cmx": for-pack(Dns)
"lib/operators.cmx": for-pack(Dns)
"lib/Operators.cmx": for-pack(Dns)
"lib/packet.cmx": for-pack(Dns)
"lib/Packet.cmx": for-pack(Dns)
"lib/query.cmx": for-pack(Dns)
"lib/Query.cmx": for-pack(Dns)
"lib/rR.cmx": for-pack(Dns)
"lib/RR.cmx": for-pack(Dns)
"lib/trie.cmx": for-pack(Dns)
"lib/Trie.cmx": for-pack(Dns)
"lib/wire.cmx": for-pack(Dns)
"lib/Wire.cmx": for-pack(Dns)
"lib/zone.cmx": for-pack(Dns)
"lib/Zone.cmx": for-pack(Dns)
"lib/zone_lexer.cmx": for-pack(Dns)
"lib/Zone_lexer.cmx": for-pack(Dns)
"lib/zone_parser.cmx": for-pack(Dns)
"lib/Zone_parser.cmx": for-pack(Dns)
<lib/*.ml{,i}>: pkg_uri
<lib/*.ml{,i}>: pkg_re.str
<lib/*.ml{,i}>: pkg_re
<lib/*.ml{,i}>: pkg_cryptokit
<lib/*.ml{,i}>: pkg_bitstring.syntax
<lib/*.ml{,i}>: pkg_bitstring
# Executable odig
<client/odig.{native,byte}>: use_dns
<client/odig.{native,byte}>: pkg_uri
<client/odig.{native,byte}>: pkg_re.str
<client/odig.{native,byte}>: pkg_re
<client/odig.{native,byte}>: pkg_lwt.unix
<client/odig.{native,byte}>: pkg_lwt.syntax
<client/odig.{native,byte}>: pkg_lwt
<client/odig.{native,byte}>: pkg_cryptokit
<client/odig.{native,byte}>: pkg_bitstring.syntax
<client/odig.{native,byte}>: pkg_bitstring
<client/*.ml{,i}>: use_dns
<client/*.ml{,i}>: pkg_uri
<client/*.ml{,i}>: pkg_re.str
<client/*.ml{,i}>: pkg_re
<client/*.ml{,i}>: pkg_lwt.unix
<client/*.ml{,i}>: pkg_lwt.syntax
<client/*.ml{,i}>: pkg_lwt
<client/*.ml{,i}>: pkg_cryptokit
<client/*.ml{,i}>: pkg_bitstring.syntax
<client/*.ml{,i}>: pkg_bitstring
<client/odig.{native,byte}>: custom
# Library resolver
"resolver": include
<resolver/*.ml{,i}>: use_dns
<resolver/*.ml{,i}>: pkg_uri
<resolver/*.ml{,i}>: pkg_re.str
<resolver/*.ml{,i}>: pkg_re
<resolver/*.ml{,i}>: pkg_lwt.unix
<resolver/*.ml{,i}>: pkg_lwt.syntax
<resolver/*.ml{,i}>: pkg_lwt
<resolver/*.ml{,i}>: pkg_cryptokit
<resolver/*.ml{,i}>: pkg_bitstring.syntax
<resolver/*.ml{,i}>: pkg_bitstring
# Executable time_server
<lib_test/time_server.{native,byte}>: use_dns
<lib_test/time_server.{native,byte}>: pkg_uri
<lib_test/time_server.{native,byte}>: pkg_re.str
<lib_test/time_server.{native,byte}>: pkg_re
<lib_test/time_server.{native,byte}>: pkg_lwt.unix
<lib_test/time_server.{native,byte}>: pkg_lwt
<lib_test/time_server.{native,byte}>: pkg_cryptokit
<lib_test/time_server.{native,byte}>: pkg_bitstring.syntax
<lib_test/time_server.{native,byte}>: pkg_bitstring
<lib_test/time_server.{native,byte}>: custom
# Library server
"server": include
<server/*.ml{,i}>: use_dns
<server/*.ml{,i}>: pkg_uri
<server/*.ml{,i}>: pkg_re.str
<server/*.ml{,i}>: pkg_re
<server/*.ml{,i}>: pkg_lwt.unix
<server/*.ml{,i}>: pkg_lwt.syntax
<server/*.ml{,i}>: pkg_lwt
<server/*.ml{,i}>: pkg_cryptokit
<server/*.ml{,i}>: pkg_bitstring.syntax
<server/*.ml{,i}>: pkg_bitstring
# Executable lwt_server
<lib_test/lwt_server.{native,byte}>: use_dns
<lib_test/lwt_server.{native,byte}>: pkg_uri
<lib_test/lwt_server.{native,byte}>: pkg_re.str
<lib_test/lwt_server.{native,byte}>: pkg_re
<lib_test/lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/lwt_server.{native,byte}>: pkg_lwt
<lib_test/lwt_server.{native,byte}>: pkg_cryptokit
<lib_test/lwt_server.{native,byte}>: pkg_bitstring.syntax
<lib_test/lwt_server.{native,byte}>: pkg_bitstring
<lib_test/*.ml{,i}>: use_dns
<lib_test/*.ml{,i}>: pkg_uri
<lib_test/*.ml{,i}>: pkg_re.str
<lib_test/*.ml{,i}>: pkg_re
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/*.ml{,i}>: pkg_cryptokit
<lib_test/*.ml{,i}>: pkg_bitstring.syntax
<lib_test/*.ml{,i}>: pkg_bitstring
<lib_test/lwt_server.{native,byte}>: custom
# OASIS_STOP
true: annot
<lib/*>: syntax_camlp4o
<lib/*>: bitstring.syntax
<lib/*>: pkg_lwt.syntax
<server/*>: syntax_camlp4o
<server/*>: pkg_lwt.syntax
<lib_test/*>: syntax_camlp4o
<lib_test/*>: pkg_lwt.syntax
<resolver/*>: syntax_camlp4o
<resolver/*>: pkg_lwt.syntax
<client/*>: syntax_camlp4o
<client/*>: pkg_lwt.syntax
