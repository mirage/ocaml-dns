# OASIS_START
# DO NOT EDIT (digest: c100e09f6b93e12aea1cdedaaac83593)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library dns
"lib/dns.cmxs": use_dns
"lib/hashcons.cmx": for-pack(Dns)
"lib/loader.cmx": for-pack(Dns)
"lib/name.cmx": for-pack(Dns)
"lib/operators.cmx": for-pack(Dns)
"lib/packet.cmx": for-pack(Dns)
"lib/query.cmx": for-pack(Dns)
"lib/RR.cmx": for-pack(Dns)
"lib/trie.cmx": for-pack(Dns)
"lib/zone.cmx": for-pack(Dns)
"lib/zone_lexer.cmx": for-pack(Dns)
"lib/zone_parser.cmx": for-pack(Dns)
"lib/resolvconf.cmx": for-pack(Dns)
"lib/buf.cmx": for-pack(Dns)
"lib/protocol.cmx": for-pack(Dns)
"lib/dig.cmx": for-pack(Dns)
"lib/probe.cmx": for-pack(Dns)
<lib/*.ml{,i,y}>: pkg_base64
<lib/*.ml{,i,y}>: pkg_bytes
<lib/*.ml{,i,y}>: pkg_cstruct
<lib/*.ml{,i,y}>: pkg_ipaddr
<lib/*.ml{,i,y}>: pkg_re
<lib/*.ml{,i,y}>: pkg_re.str
<lib/*.ml{,i,y}>: pkg_uri.services
# Library dns-lwt-core
"lwt/dns-lwt-core.cmxs": use_dns-lwt-core
# Library dns-lwt-mirage
"mirage/dns-lwt-mirage.cmxs": use_dns-lwt-mirage
<mirage/*.ml{,i,y}>: pkg_base64
<mirage/*.ml{,i,y}>: pkg_bytes
<mirage/*.ml{,i,y}>: pkg_cstruct
<mirage/*.ml{,i,y}>: pkg_io-page
<mirage/*.ml{,i,y}>: pkg_ipaddr
<mirage/*.ml{,i,y}>: pkg_lwt
<mirage/*.ml{,i,y}>: pkg_mirage-profile
<mirage/*.ml{,i,y}>: pkg_mirage-types
<mirage/*.ml{,i,y}>: pkg_re
<mirage/*.ml{,i,y}>: pkg_re.str
<mirage/*.ml{,i,y}>: pkg_uri.services
<mirage/*.ml{,i,y}>: use_dns
<mirage/*.ml{,i,y}>: use_dns-lwt-core
# Library dns-lwt
"lwt/dns-lwt.cmxs": use_dns-lwt
# Library dns-async
"async/dns-async.cmxs": use_dns-async
# Library dns-async-unix
"async/dns-async-unix.cmxs": use_dns-async-unix
<async/*.ml{,i,y}>: pkg_async
<async/*.ml{,i,y}>: pkg_async_kernel
<async/*.ml{,i,y}>: pkg_base64
<async/*.ml{,i,y}>: pkg_bytes
<async/*.ml{,i,y}>: pkg_core.syntax
<async/*.ml{,i,y}>: pkg_cstruct
<async/*.ml{,i,y}>: pkg_ipaddr
<async/*.ml{,i,y}>: pkg_re
<async/*.ml{,i,y}>: pkg_re.str
<async/*.ml{,i,y}>: pkg_threads
<async/*.ml{,i,y}>: pkg_uri.services
<async/*.ml{,i,y}>: use_dns
<async/*.ml{,i,y}>: use_dns-async
# Executable lwt_server
<lib_test/unix/lwt_server.{native,byte}>: pkg_base64
<lib_test/unix/lwt_server.{native,byte}>: pkg_bytes
<lib_test/unix/lwt_server.{native,byte}>: pkg_cstruct
<lib_test/unix/lwt_server.{native,byte}>: pkg_cstruct.lwt
<lib_test/unix/lwt_server.{native,byte}>: pkg_ipaddr
<lib_test/unix/lwt_server.{native,byte}>: pkg_ipaddr.unix
<lib_test/unix/lwt_server.{native,byte}>: pkg_lwt
<lib_test/unix/lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/unix/lwt_server.{native,byte}>: pkg_mirage-profile
<lib_test/unix/lwt_server.{native,byte}>: pkg_re
<lib_test/unix/lwt_server.{native,byte}>: pkg_re.str
<lib_test/unix/lwt_server.{native,byte}>: pkg_uri.services
<lib_test/unix/lwt_server.{native,byte}>: use_dns
<lib_test/unix/lwt_server.{native,byte}>: use_dns-lwt
<lib_test/unix/lwt_server.{native,byte}>: use_dns-lwt-core
<lib_test/unix/lwt_server.{native,byte}>: custom
# Executable time_server
<lib_test/unix/time_server.{native,byte}>: pkg_base64
<lib_test/unix/time_server.{native,byte}>: pkg_bytes
<lib_test/unix/time_server.{native,byte}>: pkg_cstruct
<lib_test/unix/time_server.{native,byte}>: pkg_cstruct.lwt
<lib_test/unix/time_server.{native,byte}>: pkg_ipaddr
<lib_test/unix/time_server.{native,byte}>: pkg_ipaddr.unix
<lib_test/unix/time_server.{native,byte}>: pkg_lwt
<lib_test/unix/time_server.{native,byte}>: pkg_lwt.unix
<lib_test/unix/time_server.{native,byte}>: pkg_mirage-profile
<lib_test/unix/time_server.{native,byte}>: pkg_re
<lib_test/unix/time_server.{native,byte}>: pkg_re.str
<lib_test/unix/time_server.{native,byte}>: pkg_uri.services
<lib_test/unix/time_server.{native,byte}>: use_dns
<lib_test/unix/time_server.{native,byte}>: use_dns-lwt
<lib_test/unix/time_server.{native,byte}>: use_dns-lwt-core
<lib_test/unix/time_server.{native,byte}>: custom
# Executable mldig
<lwt/dig_unix.{native,byte}>: pkg_base64
<lwt/dig_unix.{native,byte}>: pkg_bytes
<lwt/dig_unix.{native,byte}>: pkg_cmdliner
<lwt/dig_unix.{native,byte}>: pkg_cstruct
<lwt/dig_unix.{native,byte}>: pkg_cstruct.lwt
<lwt/dig_unix.{native,byte}>: pkg_ipaddr
<lwt/dig_unix.{native,byte}>: pkg_ipaddr.unix
<lwt/dig_unix.{native,byte}>: pkg_lwt
<lwt/dig_unix.{native,byte}>: pkg_lwt.unix
<lwt/dig_unix.{native,byte}>: pkg_mirage-profile
<lwt/dig_unix.{native,byte}>: pkg_re
<lwt/dig_unix.{native,byte}>: pkg_re.str
<lwt/dig_unix.{native,byte}>: pkg_uri.services
<lwt/dig_unix.{native,byte}>: use_dns
<lwt/dig_unix.{native,byte}>: use_dns-lwt
<lwt/dig_unix.{native,byte}>: use_dns-lwt-core
<lwt/*.ml{,i,y}>: pkg_base64
<lwt/*.ml{,i,y}>: pkg_bytes
<lwt/*.ml{,i,y}>: pkg_cmdliner
<lwt/*.ml{,i,y}>: pkg_cstruct
<lwt/*.ml{,i,y}>: pkg_cstruct.lwt
<lwt/*.ml{,i,y}>: pkg_ipaddr
<lwt/*.ml{,i,y}>: pkg_ipaddr.unix
<lwt/*.ml{,i,y}>: pkg_lwt
<lwt/*.ml{,i,y}>: pkg_lwt.unix
<lwt/*.ml{,i,y}>: pkg_mirage-profile
<lwt/*.ml{,i,y}>: pkg_re
<lwt/*.ml{,i,y}>: pkg_re.str
<lwt/*.ml{,i,y}>: pkg_uri.services
<lwt/*.ml{,i,y}>: use_dns
<lwt/*.ml{,i,y}>: use_dns-lwt
<lwt/*.ml{,i,y}>: use_dns-lwt-core
<lwt/dig_unix.{native,byte}>: custom
# Executable mdns_server
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_base64
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_bytes
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_cstruct
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_cstruct.lwt
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_ipaddr
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_ipaddr.unix
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_lwt
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_mirage-profile
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_re
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_re.str
<lib_test/unix/mdns_lwt_server.{native,byte}>: pkg_uri.services
<lib_test/unix/mdns_lwt_server.{native,byte}>: use_dns
<lib_test/unix/mdns_lwt_server.{native,byte}>: use_dns-lwt
<lib_test/unix/mdns_lwt_server.{native,byte}>: use_dns-lwt-core
<lib_test/unix/*.ml{,i,y}>: pkg_base64
<lib_test/unix/*.ml{,i,y}>: pkg_bytes
<lib_test/unix/*.ml{,i,y}>: pkg_cstruct
<lib_test/unix/*.ml{,i,y}>: pkg_cstruct.lwt
<lib_test/unix/*.ml{,i,y}>: pkg_ipaddr
<lib_test/unix/*.ml{,i,y}>: pkg_ipaddr.unix
<lib_test/unix/*.ml{,i,y}>: pkg_lwt
<lib_test/unix/*.ml{,i,y}>: pkg_lwt.unix
<lib_test/unix/*.ml{,i,y}>: pkg_mirage-profile
<lib_test/unix/*.ml{,i,y}>: pkg_re
<lib_test/unix/*.ml{,i,y}>: pkg_re.str
<lib_test/unix/*.ml{,i,y}>: pkg_uri.services
<lib_test/unix/*.ml{,i,y}>: use_dns
<lib_test/unix/*.ml{,i,y}>: use_dns-lwt
<lib_test/unix/*.ml{,i,y}>: use_dns-lwt-core
<lib_test/unix/mdns_lwt_server.{native,byte}>: custom
# Executable async_resolver
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_async
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_async_kernel
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_base64
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_bytes
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_core.syntax
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_cstruct
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_ipaddr
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_re
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_re.str
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_threads
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: pkg_uri.services
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: use_dns
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: use_dns-async
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: use_dns-async-unix
<lib_test/async/*.ml{,i,y}>: pkg_async
<lib_test/async/*.ml{,i,y}>: pkg_async_kernel
<lib_test/async/*.ml{,i,y}>: pkg_base64
<lib_test/async/*.ml{,i,y}>: pkg_bytes
<lib_test/async/*.ml{,i,y}>: pkg_core.syntax
<lib_test/async/*.ml{,i,y}>: pkg_cstruct
<lib_test/async/*.ml{,i,y}>: pkg_ipaddr
<lib_test/async/*.ml{,i,y}>: pkg_re
<lib_test/async/*.ml{,i,y}>: pkg_re.str
<lib_test/async/*.ml{,i,y}>: pkg_threads
<lib_test/async/*.ml{,i,y}>: pkg_uri.services
<lib_test/async/*.ml{,i,y}>: use_dns
<lib_test/async/*.ml{,i,y}>: use_dns-async
<lib_test/async/*.ml{,i,y}>: use_dns-async-unix
<lib_test/async/test_async_dns_resolver_unix.{native,byte}>: custom
# Executable test
<lib_test/ounit/test.{native,byte}>: pkg_base64
<lib_test/ounit/test.{native,byte}>: pkg_bytes
<lib_test/ounit/test.{native,byte}>: pkg_cstruct
<lib_test/ounit/test.{native,byte}>: pkg_io-page
<lib_test/ounit/test.{native,byte}>: pkg_io-page.unix
<lib_test/ounit/test.{native,byte}>: pkg_ipaddr
<lib_test/ounit/test.{native,byte}>: pkg_ipaddr.unix
<lib_test/ounit/test.{native,byte}>: pkg_lwt
<lib_test/ounit/test.{native,byte}>: pkg_lwt.unix
<lib_test/ounit/test.{native,byte}>: pkg_mirage-profile
<lib_test/ounit/test.{native,byte}>: pkg_mirage-types
<lib_test/ounit/test.{native,byte}>: pkg_oUnit
<lib_test/ounit/test.{native,byte}>: pkg_pcap-format
<lib_test/ounit/test.{native,byte}>: pkg_re
<lib_test/ounit/test.{native,byte}>: pkg_re.str
<lib_test/ounit/test.{native,byte}>: pkg_unix
<lib_test/ounit/test.{native,byte}>: pkg_uri.services
<lib_test/ounit/test.{native,byte}>: use_dns
<lib_test/ounit/test.{native,byte}>: use_dns-lwt-core
<lib_test/ounit/test.{native,byte}>: use_dns-lwt-mirage
<lib_test/ounit/*.ml{,i,y}>: pkg_base64
<lib_test/ounit/*.ml{,i,y}>: pkg_bytes
<lib_test/ounit/*.ml{,i,y}>: pkg_cstruct
<lib_test/ounit/*.ml{,i,y}>: pkg_io-page
<lib_test/ounit/*.ml{,i,y}>: pkg_io-page.unix
<lib_test/ounit/*.ml{,i,y}>: pkg_ipaddr
<lib_test/ounit/*.ml{,i,y}>: pkg_ipaddr.unix
<lib_test/ounit/*.ml{,i,y}>: pkg_lwt
<lib_test/ounit/*.ml{,i,y}>: pkg_lwt.unix
<lib_test/ounit/*.ml{,i,y}>: pkg_mirage-profile
<lib_test/ounit/*.ml{,i,y}>: pkg_mirage-types
<lib_test/ounit/*.ml{,i,y}>: pkg_oUnit
<lib_test/ounit/*.ml{,i,y}>: pkg_pcap-format
<lib_test/ounit/*.ml{,i,y}>: pkg_re
<lib_test/ounit/*.ml{,i,y}>: pkg_re.str
<lib_test/ounit/*.ml{,i,y}>: pkg_unix
<lib_test/ounit/*.ml{,i,y}>: pkg_uri.services
<lib_test/ounit/*.ml{,i,y}>: use_dns
<lib_test/ounit/*.ml{,i,y}>: use_dns-lwt-core
<lib_test/ounit/*.ml{,i,y}>: use_dns-lwt-mirage
<lib_test/ounit/test.{native,byte}>: custom
# OASIS_STOP
<lib_test/*>: not_hygienic
true: annot, principal, bin_annot, debug, short_paths
<lib/packet.*>: pkg_cstruct.syntax
<lib_test/ounit/test_packet.*>: pkg_cstruct.syntax
