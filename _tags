# OASIS_START
# DO NOT EDIT (digest: f3169bab5e047ce0e42320894b5b6ea9)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library dns
"lib/dns.cmxs": use_dns
"lib/base64.cmx": for-pack(Dns)
"lib/hashcons.cmx": for-pack(Dns)
"lib/loader.cmx": for-pack(Dns)
"lib/name.cmx": for-pack(Dns)
"lib/operators.cmx": for-pack(Dns)
"lib/packet.cmx": for-pack(Dns)
"lib/query.cmx": for-pack(Dns)
"lib/RR.cmx": for-pack(Dns)
"lib/trie.cmx": for-pack(Dns)
"lib/zone.cmx": for-pack(Dns)
"lib/zone_lexer.cmx": for-pack(Dns)
"lib/zone_parser.cmx": for-pack(Dns)
"lib/resolvconf.cmx": for-pack(Dns)
<lib/*.ml{,i}>: pkg_re
<lib/*.ml{,i}>: pkg_re.str
<lib/*.ml{,i}>: pkg_cstruct
<lib/*.ml{,i}>: pkg_cstruct.syntax
# Library lwt
"lwt/lwt.cmxs": use_lwt
<lwt/lwt.{cma,cmxa}>: oasis_library_lwt_cclib
"lwt/liblwt_stubs.lib": oasis_library_lwt_cclib
"lwt/dlllwt_stubs.dll": oasis_library_lwt_cclib
"lwt/liblwt_stubs.a": oasis_library_lwt_cclib
"lwt/dlllwt_stubs.so": oasis_library_lwt_cclib
<lwt/lwt.{cma,cmxa}>: use_liblwt_stubs
<lwt/*.ml{,i}>: pkg_cryptokit
"lwt/binding_crypto.c": use_dns
"lwt/binding_crypto.c": pkg_re
"lwt/binding_crypto.c": pkg_re.str
"lwt/binding_crypto.c": pkg_cstruct
"lwt/binding_crypto.c": pkg_cryptokit
"lwt/binding_crypto.c": pkg_lwt.unix
"lwt/binding_crypto.c": pkg_lwt.syntax
"lwt/binding_crypto.c": pkg_cstruct.syntax
# Library mirage
"mirage/mirage.cmxs": use_mirage
<mirage/*.ml{,i}>: use_dns
<mirage/*.ml{,i}>: pkg_re
<mirage/*.ml{,i}>: pkg_re.str
<mirage/*.ml{,i}>: pkg_cstruct
<mirage/*.ml{,i}>: pkg_cstruct.syntax
<mirage/*.ml{,i}>: pkg_mirage
<mirage/*.ml{,i}>: pkg_mirage-net
# Library async
"async/async.cmxs": use_async
# Executable lwt_server
<lib_test/lwt_server.{native,byte}>: use_lwt
<lib_test/lwt_server.{native,byte}>: use_dns
<lib_test/lwt_server.{native,byte}>: pkg_re
<lib_test/lwt_server.{native,byte}>: pkg_re.str
<lib_test/lwt_server.{native,byte}>: pkg_cstruct
<lib_test/lwt_server.{native,byte}>: pkg_cryptokit
<lib_test/lwt_server.{native,byte}>: pkg_lwt
<lib_test/lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/lwt_server.{native,byte}>: pkg_lwt.syntax
<lib_test/lwt_server.{native,byte}>: pkg_cstruct.syntax
<lib_test/lwt_server.{native,byte}>: custom
# Executable time_server
<lib_test/time_server.{native,byte}>: use_lwt
<lib_test/time_server.{native,byte}>: use_dns
<lib_test/time_server.{native,byte}>: pkg_re
<lib_test/time_server.{native,byte}>: pkg_re.str
<lib_test/time_server.{native,byte}>: pkg_cstruct
<lib_test/time_server.{native,byte}>: pkg_cryptokit
<lib_test/time_server.{native,byte}>: pkg_lwt
<lib_test/time_server.{native,byte}>: pkg_lwt.unix
<lib_test/time_server.{native,byte}>: pkg_lwt.syntax
<lib_test/time_server.{native,byte}>: pkg_cstruct.syntax
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/time_server.{native,byte}>: custom
# Executable mldig
<lwt/mldig.{native,byte}>: use_dns
<lwt/mldig.{native,byte}>: pkg_re
<lwt/mldig.{native,byte}>: pkg_re.str
<lwt/mldig.{native,byte}>: pkg_cstruct
<lwt/mldig.{native,byte}>: pkg_uri
<lwt/mldig.{native,byte}>: pkg_cmdliner
<lwt/mldig.{native,byte}>: pkg_lwt
<lwt/mldig.{native,byte}>: pkg_lwt.unix
<lwt/mldig.{native,byte}>: pkg_lwt.syntax
<lwt/mldig.{native,byte}>: pkg_cstruct.syntax
<lwt/*.ml{,i}>: use_dns
<lwt/*.ml{,i}>: pkg_re
<lwt/*.ml{,i}>: pkg_re.str
<lwt/*.ml{,i}>: pkg_cstruct
<lwt/*.ml{,i}>: pkg_uri
<lwt/*.ml{,i}>: pkg_cmdliner
<lwt/*.ml{,i}>: pkg_lwt
<lwt/*.ml{,i}>: pkg_lwt.unix
<lwt/*.ml{,i}>: pkg_lwt.syntax
<lwt/*.ml{,i}>: pkg_cstruct.syntax
<lwt/mldig.{native,byte}>: custom
# Executable load_key
<lib_test/load_key.{native,byte}>: use_lwt
<lib_test/load_key.{native,byte}>: use_dns
<lib_test/load_key.{native,byte}>: pkg_re
<lib_test/load_key.{native,byte}>: pkg_re.str
<lib_test/load_key.{native,byte}>: pkg_cstruct
<lib_test/load_key.{native,byte}>: pkg_uri
<lib_test/load_key.{native,byte}>: pkg_cryptokit
<lib_test/load_key.{native,byte}>: pkg_lwt.unix
<lib_test/load_key.{native,byte}>: pkg_lwt.syntax
<lib_test/load_key.{native,byte}>: pkg_cstruct.syntax
<lib_test/*.ml{,i}>: use_lwt
<lib_test/*.ml{,i}>: use_dns
<lib_test/*.ml{,i}>: pkg_re
<lib_test/*.ml{,i}>: pkg_re.str
<lib_test/*.ml{,i}>: pkg_cstruct
<lib_test/*.ml{,i}>: pkg_uri
<lib_test/*.ml{,i}>: pkg_cryptokit
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_lwt.syntax
<lib_test/*.ml{,i}>: pkg_cstruct.syntax
<lib_test/load_key.{native,byte}>: custom
# Executable get_nameserver
<async/get_nameserver.{native,byte}>: use_lwt
<async/get_nameserver.{native,byte}>: use_dns
<async/get_nameserver.{native,byte}>: pkg_re
<async/get_nameserver.{native,byte}>: pkg_re.str
<async/get_nameserver.{native,byte}>: pkg_cstruct
<async/get_nameserver.{native,byte}>: pkg_uri
<async/get_nameserver.{native,byte}>: pkg_threads
<async/get_nameserver.{native,byte}>: pkg_async
<async/get_nameserver.{native,byte}>: pkg_async_unix
<async/get_nameserver.{native,byte}>: pkg_core
<async/get_nameserver.{native,byte}>: pkg_cryptokit
<async/get_nameserver.{native,byte}>: pkg_lwt
<async/get_nameserver.{native,byte}>: pkg_lwt.unix
<async/get_nameserver.{native,byte}>: pkg_lwt.syntax
<async/get_nameserver.{native,byte}>: pkg_cstruct.syntax
<async/*.ml{,i}>: use_lwt
<async/*.ml{,i}>: pkg_cryptokit
<async/*.ml{,i}>: pkg_lwt
<async/*.ml{,i}>: pkg_lwt.unix
<async/*.ml{,i}>: pkg_lwt.syntax
<async/get_nameserver.{native,byte}>: custom
# Executable async_mldig
<async/async_mldig.{native,byte}>: use_dns
<async/async_mldig.{native,byte}>: pkg_re
<async/async_mldig.{native,byte}>: pkg_re.str
<async/async_mldig.{native,byte}>: pkg_cstruct
<async/async_mldig.{native,byte}>: pkg_uri
<async/async_mldig.{native,byte}>: pkg_cmdliner
<async/async_mldig.{native,byte}>: pkg_threads
<async/async_mldig.{native,byte}>: pkg_async
<async/async_mldig.{native,byte}>: pkg_async_unix
<async/async_mldig.{native,byte}>: pkg_core
<async/async_mldig.{native,byte}>: pkg_cstruct.syntax
<async/*.ml{,i}>: use_dns
<async/*.ml{,i}>: pkg_re
<async/*.ml{,i}>: pkg_re.str
<async/*.ml{,i}>: pkg_cstruct
<async/*.ml{,i}>: pkg_uri
<async/*.ml{,i}>: pkg_cmdliner
<async/*.ml{,i}>: pkg_threads
<async/*.ml{,i}>: pkg_async
<async/*.ml{,i}>: pkg_async_unix
<async/*.ml{,i}>: pkg_core
<async/*.ml{,i}>: pkg_cstruct.syntax
<async/async_mldig.{native,byte}>: custom
# OASIS_STOP
true: annot
<lib/*>: syntax_camlp4o, pkg_lwt.syntax
<lwt/*>: syntax_camlp4o, pkg_lwt.syntax
<mirage/*>: syntax_camlp4o, pkg_lwt.syntax
<lib_test/*>: syntax_camlp4o
<lib_test/*>: pkg_lwt.syntax
<client/*>: syntax_camlp4o, pkg_lwt.syntax
true: short_paths
